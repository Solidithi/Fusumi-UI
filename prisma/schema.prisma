generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id            String           @id @default(uuid())
  productName   String
  productType   ProductType
  price         Float
  unitOfMeasure String
  description   String?
  images        String[]
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  invoices      InvoiceProduct[]
  services      Service[]        @relation("ServiceBilling")
}

model Invoice {
  id            String     @id @default(uuid())
  ownerAddress  String
  debtorAddress String
  description   String?
  paidStatus    PaidStatus @default(PENDING)
  startDate     DateTime
  endDate       DateTime
  attachments   String[]

  businessId String
  business   Business         @relation(fields: [businessId], references: [id])
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  items      InvoiceProduct[]
}

model InvoiceProduct {
  id        String  @id @default(uuid())
  invoiceId String
  productId String
  quantity  Int
  invoice   Invoice @relation(fields: [invoiceId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model ServiceCustomerField {
  id        String            @id @default(uuid())
  serviceId String
  field     CustomerInfoField
  service   Service           @relation(fields: [serviceId], references: [id])
}

/// the list of possible customer-info fields
model Service {
  id             String                 @id @default(uuid())
  name           String
  description    String?
  imageUrl       String?
  startDate      DateTime
  endDate        DateTime
  attachments    String[]
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  customerFields ServiceCustomerField[]
  products       Product[]              @relation("ServiceBilling")
}

model Offer {
  id             String         @id @default(uuid())
  invoiceAddress String
  pricing        Float
  offerStatus    OfferStatus    @default(PENDING)
  startDate      DateTime
  endDate        DateTime
  attachments    String[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  offerContacts  OfferContact[]
  contacts       User[]         @relation("OfferContacts")
}

/// join‐table for Offer ⇄ User (contact info)
model OfferContact {
  offerId String
  userId  String
  offer   Offer  @relation(fields: [offerId], references: [id])
  user    User   @relation(fields: [userId], references: [id])

  @@id([offerId, userId])
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  fullName      String?
  phone         String?
  address       String?
  zipcode       String?
  nationality   String?
  personalId    String?
  sex           String?
  birthDate     DateTime?
  imageUrl      String?
  taxId         String?
  kycImageUrl   String[]
  role          UserRole       @default(CUSTOMER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  offerContacts OfferContact[]
  offers        Offer[]        @relation("OfferContacts")
}

model Business {
  id                  String   @id @default(uuid())
  businessName        String
  registrationNumber  String
  incorporationDate   DateTime
  businessType        String
  officialWebsite     String?
  businessLogo        String?
  legalRepFullName    String
  legalRepId          String
  legalRepPosition    String
  legalRepNationality String
  taxId               String
  financialProfile    String[]
  documentUrls        String[]

  invoices  Invoice[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum UserRole {
  BUSINESS
  CUSTOMER
}

enum PaidStatus {
  PENDING
  PAID
  OVERDUE
}

enum OfferStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

enum ProductType {
  SERVICE
  PRODUCT
}

enum CustomerInfoField {
  EMAIL
  FULL_NAME
  PHONE
  ADDRESS
  ZIPCODE
  NATIONALITY
  PERSONAL_ID
  SEX
  BIRTHDATE
  IMAGE
  TAX_ID
  KYC_IMAGE
}
