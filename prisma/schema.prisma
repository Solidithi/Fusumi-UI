// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id            Int      @id @default(autoincrement())
  productName   String
  productType   ProductType
  price         Float
  unitOfMeasure String
  description   String?
  images        String[] // store the uploaded image’s URL or path
  startDate     DateTime
  endDate       DateTime

  invoices InvoiceProduct[]
  services Service[]        @relation("ServiceBilling")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invoice {
  id            Int      @id @default(autoincrement())
  ownerAddress  String
  debtorAddress String
  description   String?
  paidStatus    PaidStatus @default(PENDING)
  startDate     DateTime
  endDate       DateTime

  // — Billing: the selected products for this invoice
  items InvoiceProduct[]

  // — Agreements & Binding: any uploaded docs or images
  attachments String[] // store the uploaded file URLs or paths

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InvoiceProduct {
  id        Int     @id @default(autoincrement())
  invoice   Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int

  // you could add fields here like `quantity` or `unitPrice` if needed later
}

model ServiceCustomerField {
  id        Int               @id @default(autoincrement())
  service   Service           @relation(fields: [serviceId], references: [id])
  serviceId Int
  field     CustomerInfoField
}

/// the list of possible customer-info fields
model Service {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  imageUrl    String? // your “upload” field
  startDate   DateTime
  endDate     DateTime

  // — Billing: which Products this service bills
  products Product[] @relation("ServiceBilling")


  // — Customer Info: which fields to collect
  customerFields ServiceCustomerField[]

  // — Agreements & Binding: uploaded docs/images
  attachments String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Offer {
  id             Int      @id @default(autoincrement())
  invoiceAddress String // “Invoice Address” text field
  pricing        Float // “Pricing” numeric field; switch to Decimal if you need exact precision
  offerStatus    OfferStatus @default(PENDING)
  startDate      DateTime // “Start Date”
  endDate        DateTime // “End Date”

  // — Contact Info: select one or more users as contacts
  contacts      User[]         @relation("OfferContacts")
  offerContacts OfferContact[]

  // — Agreements & Binding: uploaded docs/images
  attachments String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// join‐table for Offer ⇄ User (contact info)
model OfferContact {
  offer   Offer @relation(fields: [offerId], references: [id])
  offerId Int
  user    User  @relation(fields: [userId], references: [id])
  userId  Int

  @@id([offerId, userId])
}

model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  fullName    String?
  phone       String?
  // any other profile‐type fields you need:
  address     String?
  zipcode     String?
  nationality String?
  personalId  String?
  sex         String?
  birthDate   DateTime?
  imageUrl    String?
  taxId       String?
  kycImageUrl String[]

  // — Relations
  offers        Offer[]        @relation("OfferContacts")
  offerContacts OfferContact[]
  // optionally hook into your existing relations:
  // invoices    Invoice[] @relation("InvoiceCreator")
  // services    Service[] @relation("ServiceCreator")

  role      UserRole @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // optionally hook into your existing relations:
  // invoices    Invoice[]    @relation("InvoiceCreator")
  // services    Service[]    @relation("ServiceCreator")
}

model Business {
  id                 String   @id @default(uuid())
  // Business Info
  businessName       String
  registrationNumber String
  incorporationDate  DateTime
  businessType       String
  officialWebsite    String?      // optional
  businessLogo    String?      // optional - logo image URL

  // Legal Representative Info
  legalRepFullName   String
  legalRepId   String
  legalRepPosition   String
  legalRepNationality String
  taxId              String

  // Financial & Description
  financialProfile   String[]

  // File Uploads (as JSON array of URLs if needed)
  documentUrls       String[]     // array of strings (URLs/paths)

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}


enum UserRole {
  BUSINESS
  CUSTOMER
}

enum PaidStatus {
  PENDING
  PAID
  OVERDUE
}

enum OfferStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

enum ProductType {
  SERVICE
  PRODUCT
}

enum CustomerInfoField {
  EMAIL
  FULL_NAME
  PHONE
  ADDRESS
  ZIPCODE
  NATIONALITY
  PERSONAL_ID
  SEX
  BIRTHDATE
  IMAGE
  TAX_ID
  KYC_IMAGE
}
